#include <iostream>
#include <GL/gl.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>
#include<windows.h>
#include<mmsystem.h>

float f = 0.0;
float fa2 = 0.0;
bool frd = false;
bool bck = false;
bool onOff;

void drawCloud()
{
    {
    float x1,y1,x2,y2;
    float ang;
    double radius=0.2;

    x1 = -0.6,y1=0.4;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(238, 250, 252);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();
}
}

void drawCorner()
{
    //corner
glBegin(GL_LINE_STRIP);
glColor3f(1,1,1);
glVertex2f(-0.99,-0.94);
glVertex2f(-0.97,-0.94);
glVertex2f(-0.95f,-0.96f);
glVertex2f(-0.94,-1);
glEnd();

glBegin(GL_LINE_STRIP);
glColor3f(1,1,1);
glVertex2f(0.99,-0.94);
glVertex2f(0.97,-0.94);
glVertex2f(0.95f,-0.96f);
glVertex2f(0.94,-1);
glEnd();

glBegin(GL_LINE_STRIP);
glColor3f(1,1,1);
glVertex2f(-0.75,-0.1);
glVertex2f(-0.76,-0.13);
glVertex2f(-0.79,-0.15);
glVertex2f(-0.81,-0.15);
glEnd();

glBegin(GL_LINE_STRIP);
glColor3f(1,1,1);
glVertex2f(0.75,-0.1);
glVertex2f(0.76,-0.13);
glVertex2f(0.79,-0.15);
glVertex2f(0.81,-0.15);
glEnd();
}


void drawFlagLeft()
{
    glBegin(GL_LINES);
    glColor3f(1,1,1);
    glVertex2f(-1.0f,-1.0f);
    glVertex2f(-1.0f,-0.9f);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(1,0,0);

    glVertex2f(-1.0f,-0.9f);
    glVertex2f(-0.95f,-0.85f);
    glVertex2f(-1.0f,-0.8f);
    glEnd();

}

void drawFlagRight()
{
    glBegin(GL_LINES);
    glColor3f(1,1,1);
    glVertex2f(1.0f,-1.0f);
    glVertex2f(1.0f,-0.9f);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(1,0,0);

    glVertex2f(1.0f,-0.9f);
    glVertex2f(0.95f,-0.85f);
    glVertex2f(1.0f,-0.8f);
    glEnd();

}

void drawFlagLeftUp()
{
    glBegin(GL_LINES);
    glColor3f(1,1,1);
    glVertex2f(-0.8f,-0.1f);
    glVertex2f(-0.8f,0.0f);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(1,0,0);

    glVertex2f(-0.8f,0.0f);
    glVertex2f(-0.75f,0.05f);
    glVertex2f(-0.8f,0.1f);
    glEnd();

}
void drawFlagRigtUp()
{
    glBegin(GL_LINES);
    glColor3f(1,1,1);
    glVertex2f(0.8f,-0.1f);
    glVertex2f(0.8f,0.0f);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(1,0,0);

    glVertex2f(0.8f,0.0f);
    glVertex2f(0.75f,0.05f);
    glVertex2f(0.8f,0.1f);
    glEnd();

}

void night()
{
    glPushMatrix();
    glClearColor(0,0,0,0);
    glEnd();

    glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(-0.950f, 0.25f);
glVertex2f(-0.860f, 0.25f);
glVertex2f(-0.800f,0.35f);
glVertex2f(-0.8870f,0.35f);
glEnd();

glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(0.950f, 0.25f);
glVertex2f(0.860f, 0.25f);
glVertex2f(0.800f,0.35f);
glVertex2f(0.8870f,0.35f);
glEnd();

glPopMatrix();

}


void init(){

	glClearColor(0.0,0.5,0.8,1.0);
	glColor3f(0.0,0.0,0.5);
	glPointSize(4.0);
	gluOrtho2D(0.0,1000.0,0.0,1000.0);

}
void drawCircle()
{
    float x1,y1,x2,y2;
    float ang;
    double radius=0.32;

    x1 = 0.6,y1=0.42;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(0,0,128);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();



    glLineWidth(6);
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(0.37f,0.63f);
    glVertex2f(0.37f,0.2f);
    glEnd();
    glLineWidth(6);
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(0.83f,0.63f);
    glVertex2f(0.83f,0.2f);
    glEnd();
    glLineWidth(6);
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(0.6f,0.63f);
    glVertex2f(0.6f,0.2f);
    glEnd();
    glLineWidth(6);
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(0.715f,0.63f);
    glVertex2f(0.715f,0.2f);
    glEnd();
    glLineWidth(6);
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex2f(0.495f,0.63f);
    glVertex2f(0.495f,0.20f);
    glEnd();
    glLineWidth(15);
    glBegin(GL_LINES);
    glColor3f(.5,0.5,0.5);
    glVertex2f(0.31f,0.5f);
    glVertex2f(0.885f,0.5f);
    glEnd();

     glLineWidth(15);
    glBegin(GL_LINES);
    glColor3f(0.5,0.5,0.5);
    glVertex2f(0.36f,0.61f);
    glVertex2f(0.84f,0.61f);
    glEnd();

     glLineWidth(15);
    glBegin(GL_LINES);
    glColor3f(0.5,0.5,0.5);
    glVertex2f(0.28f,0.40f);
    glVertex2f(0.92f,0.4f);
    glEnd();
     glLineWidth(15);
    glBegin(GL_LINES);
    glColor3f(0.5,0.5,0.5);
    glVertex2f(0.315f,0.3f);
    glVertex2f(0.885f,0.3f);
    glEnd();
    glLineWidth(15);
    glBegin(GL_LINES);
    glColor3f(0.5,0.5,0.5);
    glVertex2f(0.37f,0.2f);
    glVertex2f(0.85f,0.2f);
    glEnd();



}
GLfloat angle = 0.0f;

void drawFootball()
{

    glPushMatrix();
    glTranslatef(f,fa2,0);
    float x1,y1,x2,y2;
    float ang;
    double radius=0.02;

    x1 = -0.57,y1=-0.35;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(1,0,0);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();
       glPopMatrix();



}

void drawHuman()
{
    float x1,y1,x2,y2;
    float ang;
    double radius=0.02;

    x1 = -0.6,y1=-0.2;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(0, 0, 1);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.6f,-0.2f);
       glVertex2f(-0.6f,-0.3f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.57f,-0.237f);
       glVertex2f(-0.63f,-0.237f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.6f,-0.3f);
       glVertex2f(-0.63f,-0.35f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.6f,-0.3f);
       glVertex2f(-0.57f,-0.35f);
       glEnd();

}

void drawHuman2()
{
    float x1,y1,x2,y2;
    float ang;
    double radius=0.02;

    x1 = -0.6,y1=-0.8;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(0, 0, 1);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.6f,-0.8f);
       glVertex2f(-0.6f,-0.9f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.57f,-0.83f);
       glVertex2f(-0.63f,-0.83f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.6f,-0.9f);
       glVertex2f(-0.63f,-0.95f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(-0.6f,-0.9f);
       glVertex2f(-0.57f,-0.95f);
       glEnd();

}

void drawHuman3()
{
    float x1,y1,x2,y2;
    float ang;
    double radius=0.02;

    x1 = 0.6,y1=-0.8;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(0, 0, 1);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();

        glBegin(GL_LINES);
       glVertex2f(0.6f,-0.8f);
       glVertex2f(0.6f,-0.9f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(0.57f,-0.85f);
       glVertex2f(0.63f,-0.85f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(0.6f,-0.9f);
       glVertex2f(0.63f,-0.93f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(0.6f,-0.9f);
       glVertex2f(0.57f,-0.93f);
       glEnd();

}

void drawHuman4()
{
    float x1,y1,x2,y2;
    float ang;
    double radius=0.02;

    x1 = 0.6,y1=-0.2;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(0, 0, 1);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(0.6f,-0.2f);
       glVertex2f(0.6f,-0.3f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(0.57f,-0.25f);
       glVertex2f(0.63f,-0.25f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(0.6f,-0.3f);
       glVertex2f(0.63f,-0.33f);
       glEnd();

       glBegin(GL_LINES);
       glVertex2f(0.6f,-0.3f);
       glVertex2f(0.57f,-0.33f);
       glEnd();

}

void drawHuman5()
{
    float x1,y1,x2,y2;
    float ang;
    double radius=0.02;

    x1 = 0.84,y1=-0.55;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(0, 0, 0);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();

}

void drawHuman6()
{
    float x1,y1,x2,y2;
    float ang;
    double radius=0.02;

    x1 = -0.84,y1=-0.55;
glBegin(GL_TRIANGLE_FAN);
    glColor3f(1, 1, 1);
        glVertex2f(x1,y1);
        for (ang=0.0f;ang<180.0f;ang+=0.2)
        {
            x2 = x1+sin(ang)*radius;
            y2 = y1+cos(ang)*radius;
            glVertex2f(x2,y2);
        }
       glEnd();

}


void display() {
   glClear(GL_COLOR_BUFFER_BIT);
   glClearColor(0.0,0.5,0.8,1.0);
   glLoadIdentity();

glPushMatrix();
//glTranslatef(position,0.0f, 0.0f);

glBegin(GL_QUADS);
//field
glColor3f(0.0f, 1.0f, 0.0f);
glVertex2f(-1.0f, -1.0f);
glVertex2f( 1.0f, -1.0f);
glColor3f(0.145,0.647,0.050);
glVertex2f( 0.8f,  -0.1f);
glVertex2f(-0.8f,  -0.1f);
glEnd();

//border
glLineWidth(4);
glBegin(GL_LINE_STRIP);
glColor3f(1,1,1);
glVertex2f(-1.0f, -1.0f);
glVertex2f( 1.0f, -1.0f);
glVertex2f( 0.8f,  -0.1f);
glVertex2f(-0.8f,  -0.1f);
glVertex2f(-1.0f,  -1.0f);

glEnd();



//mid line
glLineWidth(4);
glBegin(GL_LINES);
glColor3f(1.0f, 1.0f, 1.0f);
glVertex2f(-0.0090f,-1.0f);
glVertex2f(-0.0090f,-0.1f);
glEnd();

//Dim
drawCircle();

//building brown
glBegin(GL_QUADS);

glColor3f(0.99, 0.59, 0.1);
glVertex2f(-1.0f,-0.1f);
glVertex2f( 1.0f,-0.1f);
glColor3f(0.737, 0.517, 0.101);
glVertex2f( 1.0f,0.1f);
glVertex2f(-1.0f,  0.1f);
glEnd();


//shada part
glBegin(GL_QUADS);
glColor3f(.5,.5,.5);
glVertex2f(-1.0f,0.1f);
glVertex2f( 1.0f,0.1f);
glVertex2f( 1.0f,0.1200f);
glVertex2f(-1.0f,  0.1200f);
glEnd();

//chal
glBegin(GL_QUADS);
glColor3f(.2,.2,.2);
glVertex2f(-1.0f,0.120f);
glVertex2f( 1.0f,0.120f);
glVertex2f( 1.0f,0.200f);
glVertex2f(-1.0f,  0.200f);
glEnd();

//aiub
glBegin(GL_QUADS);
glColor3f(0.5,0.5,0.5);
glVertex2f(-0.2f,0.120f);
glVertex2f( 0.2f,0.120f);
glVertex2f( 0.2f,0.300f);
glVertex2f(-0.2f,  0.300f);
glEnd();


//gate
glBegin(GL_QUADS);
glColor3f( 1,1,1);
glVertex2f(-0.2f,-0.1f);
glVertex2f( 0.2f,-0.1f);
glVertex2f( 0.2f,0.1f);
glVertex2f(-0.2f,0.1f);
glEnd();


//Janala left side
glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(-0.8f, -0.05f);
glVertex2f( -0.7f, -0.05f);
glVertex2f( -0.7f,0.05f);
glVertex2f(-0.8f,0.05f);
glEnd();

glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(-0.6f, -0.05f);
glVertex2f( -0.5f, -0.05f);
glVertex2f( -0.5f,0.05f);
glVertex2f(-0.6f,0.05f);
glEnd();

glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(-0.4f, -0.05f);
glVertex2f( -0.3f, -0.05f);
glVertex2f( -0.3f,0.05f);
glVertex2f(-0.4f,0.05f);
glEnd();

//janala right side
glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(0.8f, -0.05f);
glVertex2f(0.7f, -0.05f);
glVertex2f( 0.7f,0.05f);
glVertex2f(0.8f,0.05f);
glEnd();

glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(0.6f, -0.05f);
glVertex2f(0.5f, -0.05f);
glVertex2f(0.5f,0.05f);
glVertex2f(0.6f,0.05f);
glEnd();

glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(0.4f, -0.05f);
glVertex2f(0.3f, -0.05f);
glVertex2f(0.3f,0.05f);
glVertex2f(0.4f,0.05f);
glEnd();

//light left
glLineWidth(5);
glBegin(GL_LINES);
glColor3f(0.070, 0.541, 0.019);
glVertex2f(-0.920f, -0.15f);
glVertex2f(-0.920f,  0.25f);
glEnd();

    glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(-0.950f, 0.25f);
glVertex2f(-0.860f, 0.25f);
glVertex2f(-0.800f,0.35f);
glVertex2f(-0.8870f,0.35f);
glEnd();



//light right
glLineWidth(5);
glBegin(GL_LINES);
glColor3f(0.070, 0.541, 0.019);
glVertex2f(0.920f, -0.15f);
glVertex2f(0.920f,  0.25f);
glEnd();

glBegin(GL_QUADS);
glColor3f(1,1,1);
glVertex2f(0.950f, 0.25f);
glVertex2f(0.860f, 0.25f);
glVertex2f(0.800f,0.35f);
glVertex2f(0.8870f,0.35f);
glEnd();


//left Dbox
glLineWidth(4);
glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.843,-0.30);
glVertex2f(-0.74,-0.30);
glEnd();



glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.941,-0.75);
glVertex2f(-0.83,-0.75);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.74,-0.30);
glVertex2f(-0.83,-0.75);
glEnd();

//right dbox
glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.843,-0.30);
glVertex2f(0.74,-0.30);
glEnd();


glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.941,-0.75);
glVertex2f(0.83,-0.75);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.74,-0.30);
glVertex2f(0.83,-0.75);
glEnd();

//goalpost left
glLineWidth(4);
glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.865,-0.40);
glVertex2f(-0.865,-0.20);
glEnd();


glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.931,-0.70);
glVertex2f(-0.931,-0.45);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.865,-0.20);
glVertex2f(-0.931,-0.45);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.865,-0.20);
glVertex2f(-0.93,-0.20);
glEnd();


glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.931,-0.45);
glVertex2f(-1.0,-0.45);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-0.93,-0.20);
glVertex2f(-1.0,-0.45);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-1.0,-0.45);
glVertex2f(-1.0,-0.70);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(-1.0,-0.70);
glVertex2f(-0.93,-0.70);
glEnd();

//goalpost right
glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.865,-0.40);
glVertex2f(0.865,-0.20);
glEnd();


glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.931,-0.70);
glVertex2f(0.931,-0.45);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.865,-0.20);
glVertex2f(0.931,-0.45);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.865,-0.20);
glVertex2f(0.93,-0.20);
glEnd();


glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.931,-0.45);
glVertex2f(1.0,-0.45);
glEnd();


glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(0.93,-0.20);
glVertex2f(1.0,-0.45);

glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(1.0,-0.45);
glVertex2f(1.0,-0.70);
glEnd();

glBegin(GL_LINES);
glColor3f(1,1,1);
glVertex2f(1.0,-0.70);
glVertex2f(0.93,-0.70);
glEnd();


drawHuman();
drawHuman2();
drawHuman3();
drawHuman4();
drawHuman5();
drawHuman6();
drawFootball();
drawFlagLeft();
drawFlagRight();
drawFlagLeftUp();
drawFlagRigtUp();
drawCorner();
glPopMatrix();


glFlush();
glutSwapBuffers();
}

void update(int value) {


    if(f > 1.0)
{
        f =1.1f;
}

else if (f < 1.0)
{
    f+= 0.1f;
    glutPostRedisplay();
    glutTimerFunc(30,update,0);
}


	glutPostRedisplay(); //Tell GLUT that the display has changed
	glutTimerFunc(25, update, 0);
}


void update2(int value2) {


    if(f < -1.0)
{
        f =-0.8f;
         glutPostRedisplay();
}

else if (f > -1.0)
{
    f-= 0.1f;
    glutPostRedisplay();
    glutTimerFunc(30,update2,0);
}


	glutPostRedisplay();
	glutTimerFunc(25, update2, 0);
}


void update4(int value4) {


    if(f > -1.0f)
{
        f = -0.4f;
        glutPostRedisplay();


}

else if (f < -1.0f)
{
    f-= 0.1f;
    glutPostRedisplay();
    glutTimerFunc(30,update4,0);
}


	glutPostRedisplay(); //Tell GLUT that the display has changed
	glutTimerFunc(25, update4, 0);
}



void update3(int value3) {


    if( fa2 > -0.5f)
{
        fa2 -= 0.1f;
        glutPostRedisplay();
        glutTimerFunc(30,update3,0);


}

else if (fa2 < -0.5f)
{
    fa2 =  -0.5f;
    glutPostRedisplay();

}


	glutPostRedisplay(); //Tell GLUT that the display has changed
	glutTimerFunc(25, update3, 0);
}
void update6(int value6) {


    if( fa2 < 0.5f)
{
        fa2 += 0.1f;
        glutPostRedisplay();
        glutTimerFunc(30,update6,0);



}

else if (fa2 > 0.5f)
{
    fa2 =  0.5f;
    glutPostRedisplay();


}


	glutPostRedisplay(); //Tell GLUT that the display has changed
	glutTimerFunc(30, update6, 0);
}
void update5(int value5) {


    if(f > 1.0)
{
        f =1.5f;
         glutPostRedisplay();

}
else if (f < 1.0)
{
    f+= .15f;
         glutPostRedisplay();
    glutTimerFunc(30,update5,0);
}





	glutPostRedisplay(); //Tell GLUT that the display has changed
	glutTimerFunc(50, update5, 0);
}
void update7(int value7) {


    if(f < -0.5)
{
        f =-0.8f;
        glutPostRedisplay();


}
else if (f >-0.5)
{
    f-= 0.15f;
         glutPostRedisplay();
         glutTimerFunc(30,update7,0);

}





	glutPostRedisplay(); //Tell GLUT that the display has changed
	glutTimerFunc(50, update7, 0);
}





void myKeyboard(unsigned char key, int x, int y){
	switch (key)
	{
	    case 'g':
        update7(0);
        break;

    case 'l':
        update4(1);
        break;

    case 'r':
        update5(1);
        break;

	case 'b':
        update2(1);
	    break;

	case 'f':
	     update(1);
        break;

    case 'p':
        update3(1);
        break;
	 case 'w':
        update6(1);
	    break;


    case 'n':
        night();
        break;





	default:
	break;
	}
}



int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitWindowSize(1200, 720);
   glutInitWindowPosition(300, 20);
   glutCreateWindow("Aiub Football Field");
   glutDisplayFunc(display);
   init();
  glutKeyboardFunc(myKeyboard);
   glutMainLoop();
   return 0;
}



